import 'dart:convert';

import 'package:flutter/material.dart';
import 'package:flutter/services.dart' show rootBundle;
import 'package:pixabay_demo/core/app/injection.dart';

/// An extension on [BuildContext] to streamline access to internationalization functionalities.
///
/// This extension provides a convenient way to retrieve localized strings via the [Intl] class,
/// making it easier to format and fetch localized content within the widget tree.
extension IntlExtension on BuildContext {
  Intl get intl => Injection.instance.get<Intl>();

  /// Retrieves a formatted localized string based on the provided [key] and optional [args].
  ///
  /// This method leverages the [Intl] class for internationalization, allowing you to access
  /// localized strings based on the current locale of the application.
  ///
  /// [key]: The key that maps to a specific localized string in the internationalization data.
  /// [args]: An optional list of arguments to replace placeholders within the localized string.
  ///
  /// Returns: The localized string if a match is found; otherwise, the original [key] is returned.
  ///
  /// Example usage:
  /// ```dart
  /// context.fmt('welcome.message', ['John']);
  /// ```
  /// This retrieves the localized string for 'welcome.message' and inserts 'John' into any
  /// placeholders found within the string.
  String fmt(String key, [List? args]) {
    return intl.of(this)?.fmt(key, args) ?? key;
  }
}

const languages = [
  Locale('en', 'US'),
  Locale('ka', 'GE'),
];

/// Internationalization (i18n) class for the the whole application
///
/// This class handles loading and formatting localized strings based on
/// language preferences. Use [fmt] to generate localized values.
///
/// Language codes are generated by ISO 639-1 standard.
class Intl {
  /// The current locale. Defaults to English (US).
  Locale locale = languages[0];

  /// Localized key-value pairs. Visible for testing.
  @visibleForTesting
  Map<String, String>? localizedValues;

  /// List of supported locales.
  List<Locale> supportedLocales = languages;

  /// Delegate for the internationalization.
  IntlDelegate get delegate => const IntlDelegate();

  /// Helper method to access localized resources using context.
  /// It uses InheritedWidget "of" syntax for simplicity.
  Intl? of(BuildContext context) => Localizations.of<Intl>(context, Intl);

  /// Formats a string with optional arguments.
  ///
  /// This method will replace placeholders in the localized string with
  /// the provided arguments.
  ///
  /// Example:
  /// "account.hello": "Hello %1, your age is %2"
  /// fmt('account.hello', ['Ismael', '16'])
  /// Output: "Hello Ismael, your age is 16".
  String fmt(String key, [List<dynamic>? args]) {
    if (args == null || args.isEmpty) {
      return localizedValues?[key] ?? key;
    }

    int index;
    String formatted = localizedValues![key]!.replaceAllMapped(
      RegExp(r'\%[0-9]{1,3}', multiLine: true),
      (match) {
        index = int.parse(match[0]!.substring(1)) - 1;
        return (args.asMap()[index] ?? match[0]).toString();
      },
    );

    return formatted;
  }

  /// Loads and decodes the language JSON file.
  ///
  /// This method reads the language file from the "assets/i18n" folder,
  /// decodes the JSON, and returns it as a map.
  Future<Map<String, dynamic>?> load() async {
    final js = await rootBundle.loadString('assets/i18n/${locale.languageCode}.json');
    Map<String, dynamic> jsonMap = jsonDecode(js);

    // Convert json values to string.
    localizedValues = jsonMap.map((key, val) => MapEntry(key, val.toString()));
    return localizedValues;
  }
}

/// A delegate for the Intl class to provide localized resources.
///
/// This factory creates instances of Intl based on the current locale.
@immutable
@visibleForTesting
class IntlDelegate extends LocalizationsDelegate<Intl> {
  /// Constructs a constant IntlDelegate.
  const IntlDelegate();

  @override
  bool isSupported(Locale locale) =>
      languages.indexWhere((e) => e.languageCode == locale.languageCode) != -1;

  @override
  Future<Intl> load(Locale locale) async {
    final Intl intl = Intl();
    intl.locale = locale;
    await intl.load();
    return intl;
  }

  @override
  bool shouldReload(IntlDelegate old) => false;
}
